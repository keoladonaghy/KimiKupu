import os
import requests
import sys

def get_pr_number():
    # GITHUB_REF format: refs/pull/123/merge
    ref = os.environ.get("GITHUB_REF", "")
    parts = ref.split("/")
    for i, part in enumerate(parts):
        if part == "pull" and i + 1 < len(parts):
            return parts[i + 1]
    print("Could not determine PR number from GITHUB_REF:", ref)
    sys.exit(1)

def fetch_pr_diff_files(api_url, repo, pr_number, token):
    url = f"{api_url}/repos/{repo}/pulls/{pr_number}/files"
    headers = {"Authorization": f"token {token}"}
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def build_diff_text(pr_files):
    diffs = []
    for file in pr_files:
        patch = file.get("patch")
        filename = file.get("filename")
        if patch:
            diffs.append(f"--- {filename} ---\n{patch}")
    return "\n\n".join(diffs)

def review_with_claude(diff_text, api_key):
    url = "https://api.anthropic.com/v1/messages"
    headers = {
        "x-api-key": REDACTEDapi03-VhFXCgZvpq3gKdN-itTjkCa35W02KWrirsUoB2bYlVK1c-Pn2yo1NxG7vBsRB31qcZbho0k4dtvuJYPCUocM_w-RZsTUAAA,
        "content-type": "application/json",
        "anthropic-version": "2023-06-01"
    }
    data = {
        "model": "claude-3-haiku-20240307",
        "max_tokens": 1024,
        "temperature": 0.2,
        "messages": [
            {
                "role": "user",
                "content": f"Please review the following GitHub PR diff as an expert code reviewer and provide actionable feedback:\n\n{diff_text}"
            }
        ]
    }
    resp = requests.post(url, headers=headers, json=data)
    resp.raise_for_status()
    # Haiku returns {"content": [{"text": ...}], ...}
    return resp.json()["content"][0]["text"]

def post_github_comment(api_url, repo, pr_number, token, body):
    url = f"{api_url}/repos/{repo}/issues/{pr_number}/comments"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github+json"
    }
    data = {"body": body}
    resp = requests.post(url, headers=headers, json=data)
    resp.raise_for_status()

def main():
    github_api_url = os.environ["GITHUB_API_URL"]
    github_repo = os.environ["GITHUB_REPOSITORY"]
    github_token = os.environ["GITHUB_TOKEN"]
    claude_api_key = os.environ["CLAUDE_API_KEY"]
    pr_number = get_pr_number()

    pr_files = fetch_pr_diff_files(github_api_url, github_repo, pr_number, github_token)
    diff_text = build_diff_text(pr_files)

    if not diff_text.strip():
        print("No diff to review.")
        sys.exit(0)

    print("Sending diff to Claude for review...")
    review = review_with_claude(diff_text, claude_api_key)
    print("Posting Claude review to PR...")

    post_github_comment(github_api_url, github_repo, pr_number, github_token, review)

if __name__ == "__main__":
    main()