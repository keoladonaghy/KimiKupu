import os
import requests
import sys
import json

def get_pr_number():
    # GITHUB_REF format: refs/pull/123/merge
    ref = os.environ.get("GITHUB_REF", "")
    parts = ref.split("/")
    for i, part in enumerate(parts):
        if part == "pull" and i + 1 < len(parts):
            return parts[i + 1]
    print("Could not determine PR number from GITHUB_REF:", ref)
    sys.exit(1)

def fetch_pr_diff_files(api_url, repo, pr_number, token):
    url = f"{api_url}/repos/{repo}/pulls/{pr_number}/files"
    headers = {"Authorization": f"token {token}"}
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def build_diff_text(pr_files):
    diffs = []
    for file in pr_files:
        patch = file.get("patch")
        filename = file.get("filename")
        if patch:
            diffs.append(f"--- {filename} ---\n{patch}")
    return "\n\n".join(diffs)

def review_with_claude(diff_text, api_key):
    url = "https://api.anthropic.com/v1/messages"
    headers = {
        "x-api-key": api_key,
        "content-type": "application/json",
        "anthropic-version": "2023-06-01"
    }
    system_prompt = (
        "You are Claude, an expert AI code reviewer. You will be given a GitHub pull request diff. "
        "Please provide a concise code review comment, focusing on possible bugs, code style, security, "
        "and best practices. Point out improvements or areas of concern."
    )
    data = {
        "model": "claude-2.1",
        "max_tokens": 400,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": diff_text}
        ]
    }
    resp = requests.post(url, headers=headers, data=json.dumps(data))
    resp.raise_for_status()
    result = resp.json()
    # Claude's output is in result['content'][0]['text'] or similar, depending on API version
    if "content" in result and result["content"]:
        return result["content"][0]["text"]
    return "No review was generated by Claude."

def post_github_comment(api_url, repo, pr_number, token, body):
    url = f"{api_url}/repos/{repo}/issues/{pr_number}/comments"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    data = {"body": body}
    resp = requests.post(url, headers=headers, data=json.dumps(data))
    resp.raise_for_status()

def main():
    api_url = os.environ.get("GITHUB_API_URL", "https://api.github.com")
    repo = os.environ.get("GITHUB_REPOSITORY")
    github_ref = os.environ.get("GITHUB_REF")
    token = os.environ.get("GITHUB_TOKEN")
    claude_api_key = os.environ.get("CLAUDE_API_KEY")

    if not (repo and github_ref and token and claude_api_key):
        print("Missing one or more required environment variables.")
        sys.exit(1)

    pr_number = get_pr_number()
    print(f"Reviewing PR #{pr_number} in {repo}...")

    pr_files = fetch_pr_diff_files(api_url, repo, pr_number, token)
    diff_text = build_diff_text(pr_files)

    if not diff_text:
        print("No diff found for this PR.")
        sys.exit(0)

    print("Sending diff to Claude for review...")
    review = review_with_claude(diff_text, claude_api_key)

    print("Posting review as PR comment...")
    post_github_comment(api_url, repo, pr_number, token, review)
    print("Review posted!")

if __name__ == "__main__":
    main()